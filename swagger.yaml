swagger: '2.0'
info:
  title: sCORe API
  version: 1.0.0
  description: |

    # Introduction  
      
    Welcome to the sCORe API. The api consists of multiple high-performance RESTful JSON endpoints that can be used to fetch the data about performance and reputation of different chainlink oracles.  
    test test
    HAHAHAH
      
    We have client libraries in [python](https://github.com/securedatalinks/reputation-score-python-client),[golang](https://github.com/securedatalinks/reputation-score-golang-client) and [nodejs](https://github.com/securedatalinks/reputation-score-js-client) generated from [swagger file](#TODO)! You can view code examples in the dark area to the right, and you can switch the programming language of the examples with the tabs in the top right.  
      
      
    # Quick Start Guide  
    ```shell  
    # With shell, you can just pass the correct header with each request  
    curl "api_endpoint_here"  
      -H "Authorization: API_KEY"  
      curl -X POST -d "from=9870454" -d "to=9877754" -d "oracle_url=0xB0Cf943Cf94E7B6A2657D15af41c5E06c2BFEA3D" reputation.link/reputation-interval
    ```
      
    For developers eager to start using sCORe API right away, there are 3 quick steps to make.  
      
    1. Sign up for a free API access key on [reputation.link](reputation.link)  
    2. (optional) If you own an oracle, register your oracle on the same page to be able to get more info about your oracle.  
    3. Make a test call using your API key. Check example on the right that fetches the most up-to-date reputation for all oracles;  
      


    # Authentication  
      
    ## Obtaining API key  
    sCORe uses API keys to allow access to the API. All requests made against the sCORe api must be validated with API key. In order to get API key, you must register at [reputation.link](http://reputation.link).  
      
    ## Using API key  
      
    > Example using auth in request body   
      
    ```ruby  
      
    #TODO  
      
    ```
      
    ```python  
    #TODO  
    ```
      
    ```shell  
    # With shell, you can just pass the correct header with each request  
    curl "api_endpoint_here"  
      -H "Authorization: API_KEY"  
      curl -X POST -d "from=9870454" -d "to=9877754" -d "oracle_url=0xB0Cf943Cf94E7B6A2657D15af41c5E06c2BFEA3D" reputation.link/reputation-interval
    ```
      
    ```javascript  
    #TODO  
      
    ```
    > Make sure to replace `API_KEY` with your API key.  
      
    API key must be included in all API requests to the server.  
    There are 2 ways to supply API key with your call:  
      
    1. In an HTTP header that looks like : `Authorization: API_KEY`  
    2. Via additional parameter in request body : `Authorization: "API_KEY"`  
      
    <aside class="notice">  
    You must replace <code>API_KEY</code> with your personal API key.  
    </aside>  
      
    # Standards and conventions  
      
    ## Endpoint Response Payload Format  
    Each endpoint returns data in JSON format with 2 parts, `data` and `status`.  
    A `data` object contains results for request if the call is successful.  
    A `status` object contains the timestamp, when the call was executed and status code and message, indicating if the request was succesfull  
    See [status codes and rate limits](#status-codes-and-rate-limits) for details in different status codes.   
      
    ```
    {  
      "data" : {  
        ...  
      },  
      "status": {  
        "timestamp": "2018-06-06T07:52:27.273Z",  
        "status_code": 400,  
        "error_message": "Invalid value for \"id\"",  
      }  
    }  
    ```
    ## Versioning  
    The sCORe API is versioned to guarantee new features and updates are non-breaking. The latest version of this API is /V1/.  
    All our API endpoints start with version.  
      
    Backwards compatible updates might be added to API without creating new version. You can check our [Changelog](#Changelog) to see those changes.  
    These updates are considered backwards compatible:  
      
     * Adding new API resources.  
     * Adding new optional request parameters to existing API methods.  
     * Adding new properties to existing API responses.  
     * Changing the order of properties in existing API responses.  
     * Changing the way some data are computed, while not changing the range of possible values     
          -- e.q. We change the way reputation of oracle is computed, but it's still a value between 1 and 100.  
      
      
    ##TODO maybe we should add minor versions, like stripe, maybe it's overkill  
    https://stripe.com/docs/api/versioning  
      
    ## Date and Time Formats  
    All endpoints that require date/time parameters allow timestamps to be passed in either `yyyy-mm-dd hh:mm:ss` (eq.2018-06-22 01:46:40) timestamp format or in Unix time (eg. 1528249600).  
    All timestamps returned in JSON payloads are returned in UTC time using human-readable format which follows this pattern: `yyyy-mm-dd hh:mm:ss`  
    Data is collected, recorded, and reported in UTC time unless otherwise specified.  
      
    ## Status codes and rate limits  
    Every endpoint always respond with HTTP status code 200 for both succesful requests and failures. The `status` object is always included in the JSON response. This object contains `status_code` and `error_message`.  
    If there was a problem processing the request, one of these status codes is returned.  
      
    Error Code |  Error Message  
    -----------|---------------  
    1000 | Request was succesful  
    1001 | This API Key is invalid.  
    1002 | API key missing.  
    1003 | Invalid request parameters  
    1004 | Your don't have permissions for this call.  
    1005 | This API Key has been disabled. Please contact support.  
    1006 | You've exceeded your API Key's HTTP request rate limit.   
    1007 | You've exceeded your API Key's daily rate limit.  
    1008 | You've exceeded your API Key's monthly rate limit.  
      
    The rate limits are:    
    XXXX per day    
    xxxx per month #TODO  

    ## Cache / Update frequency
    All data are updated every 5 minutes.

    # Endpoint overview  
      
    Endpoint |  Error Message  
    -----------|---------------  
    [/V1/reputations/historical](#historical-reputation) | historical reputations of one or more oracles
    [/V1/reputation/latest](#latest-reputation) | latest reputation of one or more oracles  
    [/V1/key/info](#API-key-metadata) | metadata about used API key (rate limits, permissions...)  
    [/V1/oracles/info](#oracle-info) | Public info about one or more oracles
    [/V1/reputations/full/latest](#oracle-latest-full-data) | All monitored data about given oracle. Only for oracle owners.
    [/V1/reputations/full/historical](#oracle-historical-full-data) | All historical monitored data about given oracle. Only for oracle owners.
  contact:
    email: ashley@securedatalinks.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Public
    description: Operations for retrieval of public data about oracles
  - name: Oracle owners
    description: Operations available to oracle owners
paths:
  /V1/reputations/historical:
    get:
      tags:
        - Public
      summary: historical reputations of one or all oracles
      operationId: rephist
      description: Returns each update of reputation between from and to timestamps for given oracle
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: from
          description: Get only reputation after
          type: integer
          required: true
        - in: query
          name: to
          description: Get only reputations before
          type: integer
          required: true
        - in: query
          name: oracle_address
          description: 'Get only reputations for giver oracle. If missing, get all oracles that were active between from and to'
          type: string
          required: true
        - in: header
          name: Authentication
          type: string
          required: true
      responses:
        '200':
          description: A User object
          schema:
            $ref: '#/definitions/ReputationArray'
  /V1/reputations/latest:
    get:
      tags:
        - Public
      summary: get last reputation for one or all oracles
      operationId: replate
      description: Returns latest update of reputation of given oracle
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: oracle_address
          description: 'Get only reputations for given oracle. If missing, get all oracles that were active between from and to'
          type: string
          required: true
        - in: header
          name: Authentication
          type: string
          required: true
      responses:
        '200':
          description: See status error codes for error reporting
          schema:
            $ref: '#/definitions/Reputation'
  /V1/key/info:
    get:
      tags:
        - Public
      summary: 'Meta information about key, rate limits, user'
      operationId: getKeyInfo
      description: Returns info about given API KEY
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: Authentication
          type: string
          required: true
      responses:
        '200':
          description: See status error codes for error reporting
          schema:
            $ref: '#/definitions/Key_info'
  /V1/oracles/info:
    get:
      tags:
        - Public
      summary: metadata about oracles
      operationId: Oracles
      description: Returns public information about oracle
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: oracle_addres
          description: 'Get only reputations for given oracle. If missing, get all oracles that were active between from and to'
          type: string
          required: true
      responses:
        '200':
          description: See status error codes for error reporting
          schema:
            $ref: '#/definitions/Oracle_info'
  /V1/reputations/owner/historical:
    get:
      tags:
        - Oracle owners
      summary: All historical data used for computing reputation
      operationId: fulhist
      description: Returns all oracle performance data from given timeframe. The oracle must be registered on reputation.link with the account associated with API key.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: oracle_addres
          description: Addres of oracle
          type: string
          required: true
      responses:
        '200':
          description: See status error codes for error reporting
          schema:
            $ref: '#/definitions/ReputationArray'
  /V1/reputations/owner/latest/:
    get:
      tags:
        - Oracle owners
      summary: metadata about oracle
      operationId: fullatest
      description: Returns public information about oracle
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: oracle_addres
          description: Returns latest oracle performance data. The oracle must be registered on reputation.link with the account associated with API key.
          type: string
          required: true
      responses:
        '200':
          description: See status error codes for error reporting
          schema:
            $ref: '#/definitions/Reputation'
definitions:
  Reputation:
    type: object
    required:
      - timestamp
      - network
      - oracle_address
      - reputation
      - total_requests
      - total_responses
      - link_earned
      - avg_response_time
      - uptime
      - unique_requestors
      - gas_price
      - assignment_complete_ratio
    properties:
      timestamp:
        type: integer
        format: timestamp
        example: 97521541
      network:
        type: string
        example: Ropsten
      oracle_address:
        type: string
        example: 1.0094115432877367e+48
      reputation:
        type: number
        example: 95.4 
      total_requests:
        type: integer
        example: 1400
      total_responses:
        type: integer
        example: 1399 
      link_earned:
        type: integer 
        example: 1450
      avg_response_time:
        type: number
        example: 0.99
      uptime:
        type: number
        example: 0.999
      unique_requestors:
        type: integer
        example: 40
      gas_price:
        type: integer
        example: 134057
      assignment_complete_ratio:
        type: number
        example: 0.99
  ReputationArray:
    type: array
    items:
      $ref: '#/definitions/Reputation'
  Key_info:
    type: object
    required:
      - state
      - email
      - owned_oracles
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      name:
        type: string
        example: Widget Adapter
      nasdf:
        type: string
        example: Widget Adapter
      releaseDate:
        type: string
        format: date-time
        example: '2016-08-29 09:12:33 UTC'
  Oracle_info:
    required:
      - name
    properties:
      name:
        type: string
        example: ACME Corporation
      homePage:
        type: string
        format: url
        example: 'https://www.acme-corp.com'
      phone:
        type: string
        example: 408-867-5309
host: 'reputation.link:3001'
basePath: /
schemes:
  - https

